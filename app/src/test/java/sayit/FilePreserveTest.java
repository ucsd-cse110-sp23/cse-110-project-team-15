/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sayit;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import java.util.ArrayList;

class FilePreserveTest {
    private PromptHistory myHistory;
    private PromptHistory newLineHistory;
    private final String FILE_TEST3_PATH = "src/test/java/sayit/Test-files/test-3.txt";
    private final String FILE_EMPTY_PATH = "src/test/java/sayit/Test-files/empty.txt";

    @BeforeEach
    void setup(){
        myHistory = new PromptHistory(); //Use my six line test file
        myHistory.setupPromptHistory(FILE_TEST3_PATH);
        newLineHistory = new PromptHistory();
        newLineHistory.setupPromptHistory(FILE_EMPTY_PATH);
    }

    @Test
    void testFileNew() {
        // get a copy of the prompts array
        ArrayList<Prompt> beforePrompts = new ArrayList<>(newLineHistory.getHistoryArray());
        
        // add 2 prompts to app's prompts array and beforePrompts
        Prompt p1 = new Prompt("Is the ocean a soup?", "Whatever makes you happy.");
        newLineHistory.addPrompt(p1);
        beforePrompts.add(p1);
        Prompt p2 = new Prompt("What's red and bad for your teeth?", "A brick.");
        newLineHistory.addPrompt(p2);
        beforePrompts.add(p2);

        // have the app write to the empty file as if it was closing the app
        newLineHistory.closeApp(FILE_EMPTY_PATH);

        /* read from (former) empty file, copy its contents 
        into afterPrompts array, and compare it to beforePrompts */
        ArrayList<Prompt> afterPrompts = new ArrayList<>();
        try {
            FileReader fileReader = new FileReader(FILE_EMPTY_PATH);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String lineLoop;
            String qLine = "";    // query line
            String aLine = "";   // answer line
            
            while (((lineLoop = bufferedReader.readLine()) != null)) {
                if (lineLoop.equals("#Start#")) {
                    qLine = bufferedReader.readLine();
                }
                else if (lineLoop.equals("#End#")) {
                    Prompt questionAndAnswer = new Prompt(qLine, aLine);
                    afterPrompts.add(questionAndAnswer);
                    aLine = "";
                }
                else {
                    aLine += lineLoop;
                }
            }
            bufferedReader.close();
            fileReader.close();
          } 
          catch (IOException e){
            System.out.println(e);
          }

        // compare before and after prompts size
        assertEquals(beforePrompts.size(), afterPrompts.size());

        // compare before and after prompts contents
        assertEquals(beforePrompts.get(0).getQuery(), afterPrompts.get(0).getQuery());
        assertEquals(beforePrompts.get(0).getAnswer(), afterPrompts.get(0).getAnswer());
        assertEquals(beforePrompts.get(1).getQuery(), afterPrompts.get(1).getQuery());
        assertEquals(beforePrompts.get(1).getAnswer(), afterPrompts.get(1).getAnswer());
    }

    @Test
    void testFileClearAll() {
        // get a copy of the prompts array
        ArrayList<Prompt> beforePrompts = new ArrayList<>(myHistory.getHistoryArray());
        
        // make sure the amount of prompts stored is not 0
        assertNotEquals(0, beforePrompts.size());

        // clear all prompts in app's prompts array and beforePrompts
        myHistory.clearPrompts();
        beforePrompts.clear();

        // have the app write to the empty file as if it was closing the app
        myHistory.closeApp(FILE_EMPTY_PATH);

        /* read from (former) empty file, copy its contents 
        into afterPrompts array, and compare it to beforePrompts */
        ArrayList<Prompt> afterPrompts = new ArrayList<>();
        try {
            FileReader fileReader = new FileReader(FILE_EMPTY_PATH);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String lineLoop;
            String qLine = "";    // query line
            String aLine = "";   // answer line
            
            while (((lineLoop = bufferedReader.readLine()) != null)) {
                if (lineLoop.equals("#Start#")) {
                    qLine = bufferedReader.readLine();
                }
                else if (lineLoop.equals("#End#")) {
                    Prompt questionAndAnswer = new Prompt(qLine, aLine);
                    afterPrompts.add(questionAndAnswer);
                    aLine = "";
                }
                else {
                    aLine += lineLoop;
                }
            }
            bufferedReader.close();
            fileReader.close();
          } 
          catch (IOException e){
            System.out.println(e);
          }

        // compare before and after prompts size
        assertEquals(beforePrompts.size(), afterPrompts.size());

        // compare before and after prompts contents
        assertEquals(true, beforePrompts.equals(afterPrompts));
    }

    @Test
    void testFileRemoveSelected() {
        // get a copy of the prompts array
        ArrayList<Prompt> beforePrompts = new ArrayList<>(myHistory.getHistoryArray());
        
        // make sure the amount of prompts stored is not 0
        assertNotEquals(0, beforePrompts.size());

        // remove prompts from prompts array and beforePrompts array
        // remove 2 elements
        Prompt p = beforePrompts.get(1);
        beforePrompts.remove(1);
        myHistory.removePrompt(p);
        assertEquals(beforePrompts.size(), myHistory.getSize());
        
        p = beforePrompts.get(1);
        beforePrompts.remove(1);
        myHistory.removePrompt(p);
        assertEquals(beforePrompts.size(), myHistory.getSize());

        // have the app write to the empty file as if it was closing the app
        myHistory.closeApp(FILE_EMPTY_PATH);

        /* read from (former) empty file, copy its contents 
        into afterPrompts array, and compare it to beforePrompts */
        ArrayList<Prompt> afterPrompts = new ArrayList<>();
        try {
            FileReader fileReader = new FileReader(FILE_EMPTY_PATH);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String lineLoop;
            String qLine = "";    // query line
            String aLine = "";   // answer line
            
            while (((lineLoop = bufferedReader.readLine()) != null)) {
                if (lineLoop.equals("#Start#")) {
                    qLine = bufferedReader.readLine();
                }
                else if (lineLoop.equals("#End#")) {
                    Prompt questionAndAnswer = new Prompt(qLine, aLine + "\n");
                    afterPrompts.add(questionAndAnswer);
                    aLine = "";
                }
                else {
                    aLine += lineLoop;
                }
            }
            bufferedReader.close();
            fileReader.close();
          } 
          catch (IOException e){
            System.out.println(e);
          }

        // compare before and after prompts size
        assertEquals(beforePrompts.size(), afterPrompts.size());

        // compare before and after prompts contents
        assertEquals(beforePrompts.get(0).getQuery(), afterPrompts.get(0).getQuery());
        assertEquals(beforePrompts.get(0).getAnswer(), afterPrompts.get(0).getAnswer());
    }

    @AfterEach
    void clean() throws FileNotFoundException, IOException{
        // clear the empty file
        new FileOutputStream(FILE_EMPTY_PATH).close();
    }
}
