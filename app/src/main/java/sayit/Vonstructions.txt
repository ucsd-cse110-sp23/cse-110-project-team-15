Refactoring to 3-tier architecture:
- move all business logic to server 
    x- bring back file preservation, but do it on the server
    - make different contexts for each functionality (different requestHandler for each)
        x- /loadPrompts
        x- /newQuestion 
        x- /deletePrompt
        x- /clearAll
        - /createEmail
        - /sendEmail
x- make UI only show buttons, and prompts retreived from server
    x- should no longer store anything 
    x- buttons/functionalities should just be: 
        x- making a request (which changes the prompts on the server) 
        x- receving back a string response (used to update the UI)
x- Only App, AppFrame, Footer, and ScrollFrame are needed for UI
x- Rest of the classes should be doing stuff on the server


In createEmailHandler:
    x- (similar to newQH handlePut()) create a handlePut() method that does the following:
        x- read the email subject from the input file
        x- call makeAnswer() from OutputA to get ChatGPT response
        x- add (the command), the email subject, then the ChatGPT response to prompts
        x- Optional: print - "createEH: " + response
        x- return response (which should be the ChatGPT's answer/reponse from makeAnswer())


In AppFrame:
    Step 1:
    - create a function called "createEmail(String subject)", which will do the following:
        - request handlePut() in createEmailHandler and input (inside a file) the email subject into it 
            - (it is similar to the code in newQuestion())
        - read the server's response from its file (that file should contain the email contents to the email subject made from ChatGPT)
            - (it is similar to how it was done in newQuestion())
        - add the command (Create Email), the email subject, and the response into the scrollFrame
    Step 2:
    - in the same place y'all made the string parsing:
        - parse the response from startHandler to also look for "create email"
            - Ex| response = "create email to Jill let's meet at Geisel for our 7pm study session"
        - call createEmail(String subject) and pass in entirety of response into it
            - Ex| pass in all of "create email to Jill let's meet at Geisel for our 7pm study session", not just "to Jill let's meet at Geisel for our 7pm study session"


In Prompts:
    x- change constructor to also take in a StringBuilder emailPrompt
        x- will store command, query (subject), and response into it
    x- if the command is "Create Email":
        x- create an additional button to be used to select an email
    x- if the email button is pressed:
        x- set emailPrompt that command, query, and response
    x- fix everywehere where a Prompt is created
        x- in handlers, put a null for the 4th parameter
        x- in AppFrame, input emailPrompt


In AppFrame: 
    x- create a StringBuilder emailPrompt 
        x- to contain command, query (subject), and response
    x- whenever a Prompt is created, pass in emailPrompt


In sendEmailHandler:
    x- from request, read:
        x- String fromEmail
        x- String password
        x- String toEmail
        x- String SMTPHost
        x- String TLSPort
        x- String subject
        x- String body
    x- call TLSSendEmail() with all that
        x- if it returns true, return "Email Successfully Sent"
        x- otherwise, return "Error with Email"


In createEmailHandler:
    - change how M&J call the handlePut to include displayName when they're done
    - from request, read:
        x- subject
        - displayName
    - to the content (later stored in response), append "\nBest Regards\n" + displayName 